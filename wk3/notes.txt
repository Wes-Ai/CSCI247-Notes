Bit Twiddling:

left shift  << (*2)
right shift >> (/2)
& bitwise AND   // Use with a mask to determine if bits are set
                // Use to get the value of bits
| bitwise OR    // Set a bit or bits

10011001 == 0x99
    > Is bit 4 1 or not?

char mask = 0x08 == 00001000

 10011001   //bits
+00001000   // mask
=00001000   // set?

int a = _______     // Is bit 15 set?
int mask = 1 << 14; // Shift 14 for 15th bit.


if(a &mask != 0) {
    set
}
else {
    not set
}

a =    10011001,        char a = 0x99;
mask = 00111000,        char mask = 0x38;
a&msk= 00011000,        int val = (a &mask) >> 3;


    a = 10011001        char a = 0x99; //Set 3rd bit
 mask = 00000100        char mask = 0x04;
 a|msk= 10011101        a = a | mask;    a |= mask;

int a = _______
int mask = 1 << 23  // Get 23rd bit?
int |= mask;


Bitwise Negation (~)

a = 10011001
~a= 01100110



Fixed Point Representation:
    In 8 bits:              _ _ _ _ . _ _ _ _
                        2^3, 2^2, 2^1, 2^0, 1/2, 24, 1/8, 1/16
                            0 1 0 1 . 0 1 0 0
                                5   +   1/4 = 5.25

Floating Point Representation
    1.2345 * 10^-4 == 0.00012345

    8 bits
    1 bit = sign, 4 bits = exponent, 3 bits = significand
    1 0010 010
    - 2 * 2^2

    8 bits (small values)
    1 bit = sign, 4 bits = exponent - 7, 3 bits = significand
    0 0010 1001
    + 1 * 2^(2-7)
    = 1 * 2^-5

    4/11/2023

Normal #'s: Exponent is non-zero        Subnormal: Exponent is zero
    Mantissa has a leading 1                Mantissa has no leading 1

sign | exponenct-7 | mantissa
    1 0010 101
    - .101 * 2^(2-7)
    (1 + 1/2 + 1/8) * 2^-5

    1 0000 110
    - 0.110 * 2^-7
        ^(Base 2)
    (1/2 + 1/4) * 2^-7

Smallest positive 8 bit floating point number:
    0 0000 001
   =0.001 * 2^-7
      ^(Base 2)

IEEE 754
Floats: 1 bit    8 bits                          23 bits
        sign| Exponenet-127    |               Mantissa            |

Doubles: 1 bit  11 bits                             52 bits
         sign|  Exponent-1023    |                   Mantissa                    |

    0 0000 000 == 0
    1 0000 000 == -0

    0 1111 111 == Largest positive number
    + 1.111 * 2^8
        ^(Base 2)


    1 1111 111 == Infinity or Nan
    - 1.111 * 2^8 (Not a number)
        ^(Base 2)


Granularity of FP numbers
    0.1234
    1.234
    12.34
    123.4
    1234.0
    12340.0
    * Very fine near 0, but less accurate as it increases
    * Z-fighting issues in games for far away objects

Approximating Reality