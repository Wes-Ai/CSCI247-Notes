What does a CPU do? (CPU loop)
 -> 1. fetch an instruction
 |  2. increment the program counter
 |  3. execute instruction
 -- 4. goto 1

x86 Registers
64 Bit:         32 Bit:             16 Bit:
R0 - RAX        ROD - EAX           R0W - AX
R1 - RCX        RID - ECX           R1W - CX
R2 - RDX        R2D - EDX           R2W - DX
R3 - RBX        R3D - EBX           ...
R4 - RSP        R4D - ESP
R5 - RBP        RSD - EBP
R6 - RSI        R6D - ESI
R7 - RDI        R7D - EDI
R8              R8D
R9              R9D
R10             R10D
R11             R11D
R12             R12D
R13             R13D
R14             R14D
R15             R15D

A - Accumulator
C - Counter
S - Stack
B - Base

CPU in-depth steps:

1. IF - Instruction Fetch - Load PC into MAR, get value in MDR, move into IR
2. ID - Instruction Decode - Set up ALU
3. EX - Instruction execute - ALU does work
4. MEM - Memory Read/Write
5. WB - Write result to register (if any)

* Each instruction takes one cycle to complete, (5 cycles per instruction CPI)

disp(base, index, scale)
addr = disp + base + index * scale;

mov %r1,%r2     // Move r1 into r2
mov (%r1), %r2
mov 8(%r1), %r2 
mov 8(%r1, 3, 4), %r2 == ptr[3] -> top;
 ^ addr = 8 + %r1 + 3 * 4

 Complicated: mov 8(%r1, 3, 4), %r2
  - Fewer instructions     & variable EX cycles (CISC) (x86)

 Simple:    add $12, %r3
            add $8, %or3
            mov (%r3), %r2
 - More instructions       & EX is always 1 cycle (RISC) (ARM)

 Pipelining (Key ideas of modern CPUS)
Clock Cycle     IF      ID      EX      MEM     WB
ADD.1   |       ADD.1
ADD.2   |       ADD.2   ADD.1
MOV     |       MOV     ADD.2   ADD.1
4.      |       ...     MOV     ADD.2   ADD.1
5.      |       ...     ...     MOV     ADD.2   ADD.1
6.      |       ...     ...     ...     MOV     ADD.2

If pipeline is full, CPI = 1